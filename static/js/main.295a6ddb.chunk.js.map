{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/searchbox/searchbox.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","onClick","e","alert","name","toLowerCase","alt","src","id","email","CardList","props","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6TAIaA,EAAO,SAAC,GAAD,IAAEC,EAAF,EAAEA,QAAF,OAChB,sBAAKC,UAAU,iBAAiBC,QAAS,SAACC,GAAD,OAAOC,MAAMJ,EAAQK,KAAKC,gBAAnE,UACI,qBAAKC,IAAI,UAAUC,IAAG,+BAA0BR,EAAQS,GAAlC,4BACtB,6BAAKT,EAAQK,OACb,4BAAIL,EAAQU,YCHPC,G,MAAW,SAACC,GAAD,OACpB,qBAAKX,UAAU,YAAf,SAEIW,EAAMC,SAASC,KAAI,SAAAd,GAAO,OACtB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQS,WCLlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACrB,uBACIhB,UAAU,SACViB,KAAK,SACLF,YAAcA,EACdG,SAAWF,MCqCJG,G,wDAvCb,aAAe,IAAD,8BACZ,gBAQFH,aAAe,SAACd,GACd,EAAKkB,SAAS,CAACC,YAAanB,EAAEoB,OAAOC,SAPrC,EAAKC,MAAQ,CACXZ,SAAU,GACVS,YAAa,IALH,E,qDAad,WAAqB,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAER,SAAUiB,S,oBAG7C,WAAU,IAAD,EAC2BC,KAAKN,MAA/BZ,EADD,EACCA,SAAUS,EADX,EACWA,YACZU,EAAmBnB,EAASoB,QAAO,SAAAjC,GAAO,OAC9CA,EAAQK,KAAKC,cAAc4B,SAASZ,EAAYhB,gBAChDN,EAAQU,MAAMJ,cAAc4B,SAASZ,EAAYhB,kBAGnD,OACE,sBAAKL,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEe,YAAY,kBACZC,aAAcc,KAAKd,eAErB,cAAC,EAAD,CAAUJ,SAAUmB,W,GAlCVG,cCMHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBX,MAAK,YAAkD,IAA/CY,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.295a6ddb.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card.styles.css';\n\nexport const Card = ({monster}) => (\n    <div className='card-container' onClick={(e) => alert(monster.name.toLowerCase())}>\n        <img alt=\"monster\" src={`https://robohash.org/${monster.id}?set=set2&size=180x180`} />\n        <h2>{monster.name}</h2>\n        <p>{monster.email}</p>\n    </div>\n);","import React from 'react';\nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css'\n\nexport const CardList = (props) => (\n    <div className='card-list'>\n    {\n        props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster} />\n        ))\n    }\n    </div>\n);","import React from 'react';\n\nimport './searchbox.styles.css'\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n    <input \n        className='search'\n        type='search' \n        placeholder={ placeholder }\n        onChange={ handleChange }\n    />\n)","import { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component'\nimport { SearchBox } from './components/searchbox/searchbox.component'\n\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.state = {\n      monsters: [],\n      searchField: ''\n    }\n  }\n\n  handleChange = (e) => {\n    this.setState({searchField: e.target.value})\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({ monsters: users }));\n  }\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase()) ||\n      monster.email.toLowerCase().includes(searchField.toLowerCase())\n    );\n\n    return (\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n        <SearchBox \n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />\n        <CardList monsters={filteredMonsters} />\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}